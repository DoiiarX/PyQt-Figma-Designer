"""
This module contains the class ScriptGenerator that is responsible for generating the script file, including imports, documentation and the main function.
"""
import config
from generator.design.design_generator import DesignGenerator
from generator.design.core.frame_generator import FrameGenerator
from generator.utils import generate_print


class ScriptGenerator(DesignGenerator):
    """
    Responsible for generating the script file, including imports, documentation and the main function.
    """

    handler_class_path = 'GuiHandler'
    controller_class_path = 'GuiController'
    config_class_path = 'ComponentsConfig'
    strings_class_path = 'Strings'

    def generate_design(self):
        __doc__ = super().generate_design().__doc__
        yield from f"""\"\"\"
This file was generated by PyQT figma designer
DO NOT EDIT IT. It could cause errors and it is not the way to use this program.
\"\"\"


import logging
logging.basicConfig(level=logging.DEBUG)

try:
    import {config.gui_controller_file_name.split('.')[0]} as {self.controller_class_path}    
except Exception as e:
    {generate_print("'Exception while importing gui_controller.py'")}
    {generate_print("e")}
try : 
    import {config.gui_handler_file_name.split('.')[0]} as {self.handler_class_path}
except Exception as e:
    {generate_print("'Exception while importing gui_handler.py'")}
    {generate_print("e")}
try : 
    import {config.strings_file_name.split('.')[0]} as {self.strings_class_path}
except Exception as e:
    {generate_print("'Exception while importing strings.py'")}
    {generate_print("e")}  
try :
    import {config.components_config_file_name.split('.')[0]} as {self.config_class_path}
except Exception as e:
    {generate_print("'Exception while importing components_config.py'")}
    

from PySide6.QtSvgWidgets import QSvgWidget
from PySide6.QtCore import (QCoreApplication, QDate, QDateTime, QLocale,
    QMetaObject, QObject, QPoint, QRect,
    QSize, QTime, QUrl, Qt)
from PySide6.QtGui import (QAction, QBrush, QColor, QConicalGradient,
    QCursor, QFont, QFontDatabase, QGradient,
    QIcon, QImage, QKeySequence, QLinearGradient,
    QPainter, QPalette, QPixmap, QRadialGradient,
    QTransform, QPen, QPainterPath)
from PySide6.QtWidgets import (QApplication, QFrame, QHeaderView, QLabel,
    QLineEdit, QMainWindow, QPushButton, QSizePolicy,
    QStatusBar, QTableView, QWidget)""".splitlines()
        figma_frames = self.figma_node['children']
        frames = []
        for frame in figma_frames:
            frame = FrameGenerator(frame, self)
            frames.append(frame)
            yield from frame.generate_design()
        yield from """import sys

app = QApplication(sys.argv)""".splitlines()
        for frame in frames:
            yield from f"""MainWindow = QMainWindow()
ui = {frame.window_class_name}()
ui.setupUi(MainWindow)
MainWindow.show()
app.exec()""".splitlines()

    def generate_handler(self):
        __doc__ = super().generate_handler().__doc__
        yield from f"""\"\"\"
This file was generated by PyQT figma designer
You can edit it but be careful to not overwrite it afterward.
Each function is connected to a specific event of a specific widget in the GUI.
\"\"\"
# imports
import logging
logging.basicConfig(level=logging.DEBUG)
""".splitlines()
        yield from super().generate_handler()

    def generate_controller(self):
        __doc__ = super().generate_controller().__doc__
        yield from f"""\"\"\"
This file was generated by PyQT figma designer
DO NOT EDIT IT. It could cause errors and it is not the way to use this program.
You can call functions from this file in your own code. 
It will allow you to change the GUI from your own code.
\"\"\"

# imports
import logging
logging.basicConfig(level=logging.DEBUG)
""".splitlines()
        yield from super().generate_controller()
